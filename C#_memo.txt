
namespace C#memo
{
	class MainClass
	{
		public static void Main (string[] args)
		{
		
		/*--------------------------変数、配列・始--------------------------*/
		//よくつかう型
			int    : 符号付32ビット整数
			double : 倍精度実数
			bool   : 論理型(TrueとFalseのみ)
			string : 文字列型
			
		//変数定義
			型宣言 変数名 = 中身;
			
			//int型
				int i = 1234;

			//double型
				double d = 123.4;

			//string型
				string s = "1234";

		//配列定義
			型[] 配列名;
			
		//要素生成
			配列名 = new 型[配列数(空でも可)]{1 , 2 , 3 , 4};
			
		//配列定義+要素生成
			型[] 配列名 = new 型[配列名(空でも可)]{1 , 2 , 3 , 4};

		//空配列生成(20個から要素を持つ配列)
			型[] 配列名 = new 型[20];

		//型変換
			//あらゆるかたから文字列型へ
				.ToString();

			//小数点第三位以下四捨五入
				.ToString("F3");

		//書式
			//左詰め{0 , 有効桁数(小数点含む)} 4ならば0.01が四桁 5にすると 0.01と左に空白を半角1文字分追加する
				string.Format("{0 , 4}" , 文字列とか表示内容);
		
		//連想配列
			//Hashtable(ハッシュテーブル)
				using.System.Collotion;
				Hashtable 配列名 = new Hashtable();
				
				ht["key"] = value;
				
				foreach(var key in ht.Keys)
				{
					Console.WriteLine("{0} {1}" , key , ht[key]);
					Console.WriteLine{key ht:key]);
				}
			//Dictionary
				Dictionary<keyの型 , valueの型> 配列名 = new Dictinary<keyの型 , valueの型>();
				dic["key"] = value;
				
		//Dictionaryのキー・要素のペア数取得
			dictionary名.Count;
			
		//多次元配列(配列の中では型は一つしか指定できない)
			型[,] 配列名 = new 型[次元数 , 配列数];
			配列名[次元番号 , 配列番号] = 要素;
			
		//ジャグ配列(JAG)(配列の中では型は一つしか指定できない)
			型[] 配列名 = new 型[次元数][];
			配列名[次元数] = new 型[]{要素};
			
		//配列取り出し
			foreach(var 変数名 in 配列名)
			{
				Console.WriteLine(変数名);
			}
		
		//配列の要素数
			配列名.Lengh;
		
		//多次元配列の次元数
			配列名.Rank;
		
		//多次元配列の次元ごとの要素数
			配列名.GetLength(次元数);


		
		
		
		


		/*--------------------------変数、配列・終--------------------------*/

		/*--------------------------メモ・始--------------------------*/
		//文字連結(+をつかう)
			変数名 + "文字列";

		//変数の語尾に文字を追記する
			m  = "あ";
			m += "い";//変数mには"あい"が入っている

		//foreachはitemに配列の要素が代入される
			foreach(var item in 配列名){}

		//コンソールに書き出す(改行無し有り)
			Console.Write();
			Console.WriteLine();
			
		//コンソールから入力する(返り値はstring型)
			Console.Read();
			COnsole.ReadLine();
			
		//例外処理(空とマイナスだと何回も入力させる)
			string s = "";
			if(s == ""){
				continue;
			}
			int ints = int.Parse(s);
			if(ints < 0){
				continue;
			}
			
		//例外処理try{}catch{}
			try{
				ReadLineとかの処理
			}catch{
				空文字が入力されるとここに来るので再度入力を促す文字を表示する。
			}
		/*--------------------------メモ・終--------------------------*/

		}
	}
}
